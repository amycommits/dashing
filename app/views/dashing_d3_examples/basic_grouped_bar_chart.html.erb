<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
	<title>Basic Grouped Bar Chart Chart</title>
	<%= stylesheet_link_tag("basic_bar_chart") %>
</head>
<body>
<h1>There is a scaling issue, but the important parts are there</h1>
</body>
<script type="text/javascript">

/*CSV is like this:
state, under 5 years, 5-10,10-15, 15+
CA, ###,####,###,###
FL, ###,###,###,###

*/
//	var myData = <%= raw @linePaths.to_json %>;

var myData = [{"state":"FL", "2014":23,"2015":50,"2016":7},
			  {"state":"CA", "2014":32,"2015":51,"2016":71},
			  {"state":"WO", "2014":123,"2015":70,"2016":17},
			  {"state":"NY", "2014":83,"2015":90,"2016":57},
			  {"state":"GA", "2014":20,"2015":20,"2016":30},
			  {"state":"OR", "2014":72,"2015":15,"2016":29},	
				]

	var margin = {top:0,right:0,bottom:0,left:0},
					width=800,
					height=100;
	
	
	var x0 = d3.scale.ordinal().rangeRoundBands([0,width], .1); //ordinal for states
	var x1 = d3.scale.ordinal(); //ordinal for the data age groups
	var y = d3.scale.linear().range([height, 0]);

	var color = d3.scale.ordinal().range(["#98abc5", "7b6888","#6b486b","#a05d56","#d0743c","#ff8c00"]);

	var xAxis = d3.svg.axis().scale(x0).orient("bottom");
	var yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(d3.format(".2s"));

	var svg = d3.select("body").append("svg").attr("width",width-margin.left-margin.right)
				.append("g")
					.attr("transform", "translate("+ margin.left + ","+margin.top +")");

//gets the years ageNames
	var seriesNames = d3.keys(myData[0]).filter(function(key) {return (key !== "state")});

myData.forEach(function (d) {
	//ages
    d.numberBands = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    //alert("hi --- " + JSON.stringify(d.Flights));
});

 x0.domain(myData.map(function(d) { return d.state; }));
 x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
 y.domain([0, d3.max(myData, function(d) { return d3.max(d.numberBands, function(d) { return d.value; }); })]);

svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + width + ")")
      .call(xAxis);

 svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Population");

    var state = svg.selectAll(".state")
      .data(myData)
    .enter().append("g")
      .attr("class", "state")
      .attr("state",function(d) { return '"'+d.state+'"';})
      .attr("transform", function(d) { return "translate(" + x0(d.state) + ",0)"; });


  state.selectAll("rect")
      .data(function(d) { return d.numberBands; })
    .enter().append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x1(d.name); })
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function(d) { return color(d.name); });

var legend = svg.selectAll(".legend")
      .data(seriesNames.slice().reverse())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });

	

</script>
</html>